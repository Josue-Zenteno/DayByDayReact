{"version":3,"sources":["reportWebVitals.js","config.js","images/spicy_logo_blanco.png","utils/api.js","utils/utils.js","components/notes/NoteList.jsx","utils/apicalls.js","components/App.jsx","components/HeaderDashboard.jsx","components/notes/AddNote.jsx","components/notes/EditNote.jsx","components/notes/MyNoteList.jsx","index.js","components/Home.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","config","baseURL_API","process","clientID","axios","create","baseURL","monthNames","dayNames","getDateInStrFormat","date","getDay","getDate","getMonth","getFullYear","getHours","slice","getMinutes","getSeconds","NoteList","useState","notes","setNotes","getNotes","API","get","res","data","makeUpVote","makeDownVote","useEffect","CardTitle","tag","Alert","color","Badge","pill","length","Table","map","note","index","Row","Col","Card","CardBody","src","image","alt","user","message","align","Button","onClick","Date","publicationdate","imgStyle","maxWidth","HeaderDashboard","props","Navbar","light","expand","NavbarBrand","className","sessionStorage","getItem","Collapse","navbar","Nav","NavItem","NavLink","href","onShow","clientId","buttonText","theme","onLogoutSuccess","onLogout","AddNote","setMessage","checkPOSTNewNote","updateMyNotes","body","Form","FormGroup","Label","for","Input","style","height","type","name","value","id","placeholder","onChange","e","target","preventDefault","email","post","result","postNewNote","EditNote","checkPUTNote","idnote","put","putExistingNote","_id","MyNoteList","edit","setEdit","activeTab","setActiveTab","showDeleteModal","setShowDeleteModal","toggleTab","tab","handleUpdateMyNotes","deleteNoteSel","delete","checkDELETENote","xs","outline","handleShowEdit","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","askForDelete","tabs","classnames","active","TabContent","TabPane","tabId","sm","ReactDOM","render","exact","path","component","loginMessage","setLoginMessage","Container","Media","object","SpicyLogo","onSuccess","googleUser","profile","getBasicProfile","setItem","getName","getEmail","getImageUrl","history","push","onFailure","response","show","setShow","clear","option","document","getElementById"],"mappings":"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","file":"static/js/main.31eb2b64.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const config = {\r\n    baseURL_API: process.env.REACT_APP_APIURI,\r\n    clientID: process.env.REACT_APP_CLIENTID\r\n}\r\n\r\nexport default config;","export default __webpack_public_path__ + \"static/media/spicy_logo_blanco.36a11ad0.png\";","import axios from 'axios';\r\nimport config from '../config.js';\r\n\r\nexport default axios.create({\r\n  baseURL: config.baseURL_API\r\n  //baseURL: 'http://localhost:5000'\r\n});","export {\r\n    getDateInStrFormat\r\n};\r\n\r\n/* Formatting date */\r\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\nconst dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\",\"Fri\", \"Sat\"];\r\n\r\nfunction getDateInStrFormat(date){\r\n    var strformatted = dayNames[date.getDay()]+\", \"+\r\n                        date.getDate()+\" \"+\r\n                        monthNames[date.getMonth()]+\" \"+\r\n                        date.getFullYear()+\", \"+\r\n                        (\"0\" + date.getHours()).slice(-2)+\":\"+\r\n                        (\"0\" + date.getMinutes()).slice(-2)+\":\"+\r\n                        (\"0\" + date.getSeconds()).slice(-2);\r\n    return strformatted;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Card, CardTitle, Badge, CardBody, Table, Alert, Button } from 'reactstrap';\r\n\r\nimport { BiArrowFromBottom, BiArrowFromTop } from 'react-icons/bi';\r\n\r\nimport '../../styles.css';\r\nimport { getAllNotes } from \"../../utils/apicalls.js\";\r\nimport { getDateInStrFormat } from \"../../utils/utils.js\";\r\n\r\nexport default function NoteList(){\r\n\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  const getNotes = () => {\r\n    getAllNotes().then((notes) => { //este notes != variable de estado notes (esta guarda el resultado de usar getAllNotes)\r\n      setNotes(notes); //Ahora le seteamos a la variable de estado notes lo que hay en la variable notes \"local\"\r\n    });\r\n  }\r\n\r\n  const makeUpVote = () => {\r\n    //TODO add an UpVote\r\n    getNotes()\r\n  }\r\n\r\n  const makeDownVote = () => {\r\n    //TODO remove an UpVote and add a DownVote\r\n    getNotes()\r\n  }\r\n\r\n  //Este useEffect al no tener parametros es equivalente al ComponentWillMount de tal forma que se ejcutará al ser renderizado\r\n  useEffect(() =>{\r\n    getNotes();\r\n  },[]);\r\n\r\n  return (\r\n    <div>\r\n      <CardTitle tag=\"center\"><Alert color=\"secondary\"><strong>Notes  </strong><Badge pill color=\"secondary\">{notes.length}</Badge></Alert></CardTitle>\r\n      <Table>\r\n        <tbody>\r\n          { notes.map((note, index) => {\r\n            return(\r\n              <div>\r\n                  <Row>\r\n                    <Col>\r\n                      <Card>\r\n                        <CardBody>\r\n                          <Row><Col><strong><img src={note.image} alt=\"Img\"/> {note.user}</strong></Col></Row>\r\n                          <br></br>\r\n                          <Row>\r\n                            <Col>\r\n                              {note.message}\r\n                            </Col>\r\n                            <Col align=\"right\">\r\n                              <Button color=\"secondary\" onClick={makeDownVote}><BiArrowFromTop/></Button>\r\n                              <Button color=\"info\" onClick={makeUpVote}><BiArrowFromBottom /></Button>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col align=\"left\">\r\n                              <small>{getDateInStrFormat(new Date(note.publicationdate))}</small>\r\n                            </Col>\r\n                          </Row>\r\n                        </CardBody>\r\n                      </Card>\r\n                    </Col>\r\n                  </Row>\r\n                  <br/>\r\n              </div>)\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n}","import API from './api'\r\n\r\nexport {\r\n    getAllNotes,\r\n    getMyNotes,\r\n    deleteNote,\r\n    postNewNote,\r\n    putExistingNote\r\n};\r\n\r\nfunction getAllNotes() {\r\n    return API.get('/notes').then(res => res.data);\r\n}\r\n\r\nfunction getMyNotes(email){\r\n    return API.get('/notes/all/'+email).then(res => res.data);\r\n}\r\n\r\nfunction deleteNote(idnote) {\r\n    return API.delete('/notes/'+idnote).then(result => result.data);\r\n}\r\n\r\nfunction postNewNote(email, user, image, message) {\r\n    return API.post('/notes', {\r\n      email,\r\n      user,\r\n      image,\r\n      message}).then(result => result.data);\r\n}\r\n\r\nfunction putExistingNote(idnote, message) {\r\n    return API.put('/notes/'+idnote, {\r\n      message}).then(result => result.data);\r\n}","import React, { useState } from 'react';\r\nimport { Navbar, NavbarBrand, Nav, NavItem, Media, Row, Col, Container, Alert } from 'reactstrap';\r\nimport { GoogleLogin } from 'react-google-login';\r\n\r\nimport config from '../config.js';\r\nimport SpicyLogo from '../images/spicy_logo_blanco.png';\r\n\r\nimport NoteList from './notes/NoteList';\r\n\r\n//Un estilo, para no tener que tener un css\r\nvar imgStyle = {\r\n  maxWidth: \"85px\",\r\n};\r\n\r\nexport default function App(props){\r\n  //[variable, funcionCambiaVariable] = estadoPorDefecto\r\n  const [loginMessage, setLoginMessage] = useState(null); \r\n\r\n  const responseGoogleSuccess = (googleUser) => {\r\n    //Obtener usuario de google\r\n    var profile = googleUser.getBasicProfile(); \r\n\r\n    //Variables de sesion (sesion terminara cuando se haga logOut)\r\n    sessionStorage.setItem('name', profile.getName()); \r\n    sessionStorage.setItem('email', profile.getEmail());\r\n    sessionStorage.setItem('image', profile.getImageUrl());\r\n    \r\n    //Una historia es un array de direcciones entonces redireccionamos a /home\r\n    props.history.push(\"/home\");\r\n  }\r\n\r\n  const responseGoogleFailure = (response) => {\r\n    //Un estado puede ser lo que nos de la gana, en este caso un componente Alert\r\n    setLoginMessage(<Alert color=\"danger\">Inicio de sesión incorrecto. Inténtelo de nuevo</Alert>);\r\n  }\r\n\r\n  return(\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <Navbar color=\"dark\" light expand=\"md\">\r\n          <Media style={imgStyle} object src={SpicyLogo} alt=\"Bird\"/><NavbarBrand><h4 className=\"text-white\">Day By Day</h4></NavbarBrand>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                {loginMessage}\r\n                <GoogleLogin\r\n                  clientId={config.clientID}\r\n                  buttonText=\"Sign in with Google\"\r\n                  theme='dark'\r\n                  onSuccess={responseGoogleSuccess}\r\n                  onFailure={responseGoogleFailure}\r\n                />\r\n              </NavItem>\r\n            </Nav>\r\n          </Navbar>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col xs= \"12\">\r\n          <NoteList/>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\nimport { Collapse, Navbar, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\r\nimport { GoogleLogout } from 'react-google-login';\r\n//añadir el spicy logo\r\n\r\nimport config from '../config.js';\r\n\r\nexport default function HeaderDashboard(props){\r\n\r\n  return (\r\n    <Navbar color=\"dark\" light expand=\"md\">\r\n      <NavbarBrand><span className=\"text-white\"><strong>Day By Day:    </strong> {sessionStorage.getItem('name')}</span></NavbarBrand>\r\n      <Collapse navbar>\r\n        <Nav className=\"ml-auto\" navbar>\r\n          <NavItem>\r\n            <NavLink href=\"#\" onClick={() => props.onShow(1)}><span className=\"text-white\">Todos los Notes</span></NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink href=\"#\" onClick={() => props.onShow(2)}><span className=\"text-white\">Mis Notes</span></NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <GoogleLogout\r\n              clientId={config.clientID}\r\n              buttonText=\"Sign Out\"\r\n              theme='dark'\r\n              onLogoutSuccess={props.onLogout}\r\n            />\r\n          </NavItem>\r\n        </Nav>\r\n      </Collapse>\r\n  </Navbar>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { Card, CardTitle, Label, Button, Form, FormGroup, Input } from 'reactstrap';\r\n\r\nimport { postNewNote } from \"../../utils/apicalls.js\";\r\n\r\nexport default function AddNote(props){\r\n\r\n  const [message, setMessage] = useState('');\r\n\r\n  const addNote = (e) => {\r\n    e.preventDefault();\r\n    //Save note in database with post api call\r\n    postNewNote(sessionStorage.getItem('email'),sessionStorage.getItem('name'), sessionStorage.getItem('image'), message)\r\n      .then((res) => checkPOSTNewNote(res));\r\n  }\r\n\r\n  //Check the response from the server\r\n  const checkPOSTNewNote = (res) => {\r\n    if (res === \"OK\"){\r\n      //TODO Show Modal when a new note is added\r\n      props.updateMyNotes();\r\n    }else{\r\n      //TODO Show Modal when an error adding a new note occurs\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card body>\r\n        <CardTitle tag=\"h5\">Añadir un nuevo Note</CardTitle>\r\n        <Form>\r\n          <FormGroup>\r\n            <Label for=\"aMensaje\">Mensaje</Label>\r\n            <Input style={{height: '200px'}} type=\"textarea\" name=\"message\" value={message} id=\"aMensaje\" placeholder=\"Introduce un mensaje\" onChange={(e) => setMessage(e.target.value)}/>\r\n          </FormGroup>\r\n          <Button color=\"info\" onClick={addNote}>Añadir</Button>\r\n        </Form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Card, CardTitle, Label, Button, Form, FormGroup, Input } from 'reactstrap';\r\n\r\nimport { putExistingNote } from \"../../utils/apicalls.js\";\r\n\r\nexport default function EditNote(props){\r\n\r\n  const [message, setMessage] = useState(props.note.message);\r\n\r\n  const editNote = (e) => {\r\n    e.preventDefault();\r\n    //Update note in database with put api call\r\n    putExistingNote(props.note._id, message)\r\n      .then((res) => checkPUTNote(res));\r\n  }\r\n\r\n  //Check the response from the server\r\n  const checkPUTNote = (res) => {\r\n    if (res === \"OK\"){\r\n      //TODO Show Modal when a the note is updated\r\n      props.updateMyNotes();\r\n    }else{\r\n      //TODO Show Modal when an error updating the note occurs\r\n    }\r\n  }\r\n\r\n  useEffect(() =>{\r\n    setMessage(props.note.message);\r\n  },[props.note]);\r\n\r\n  return (\r\n    <div>\r\n      <Card body>\r\n        <CardTitle tag=\"h5\">Editar note</CardTitle>\r\n        <Form>\r\n          <FormGroup>\r\n            <Label for=\"aDescripcion\">Mensaje</Label>\r\n            <Input style={{height: '200px'}} type=\"textarea\" name=\"message\" id=\"aDescripcion\" placeholder=\"Introduce un mensaje\" value={message} onChange={(e) => setMessage(e.target.value)}/>\r\n          </FormGroup>\r\n            <Button color=\"info\" onClick={editNote}>Actualizar</Button>\r\n        </Form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport classnames from 'classnames';\r\nimport '../../styles.css';\r\n\r\n\r\nimport { Row, Col, Card, CardTitle, Badge, CardBody,\r\nTable, Alert, Button, Nav, NavItem, NavLink, TabContent,\r\nTabPane, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nimport { FaEdit, FaTrashAlt } from 'react-icons/fa';\r\nimport { AiOutlineHeart, AiOutlineRetweet } from 'react-icons/ai';\r\nimport { BsChat, BsUpload } from \"react-icons/bs\";\r\n\r\nimport { getMyNotes, deleteNote } from \"../../utils/apicalls.js\";\r\nimport { getDateInStrFormat } from \"../../utils/utils.js\";\r\n\r\nimport AddNote from './AddNote';\r\nimport EditNote from './EditNote';\r\n\r\nexport default function MyNoteList(props){\r\n\r\n  const [notes, setNotes] = useState([]);\r\n  const [edit, setEdit] = useState(<Alert color=\"danger\">Seleccione editar un Note de la lista</Alert>);\r\n  const [activeTab, setActiveTab] = useState('1');\r\n  const [showDeleteModal, setShowDeleteModal] = useState(null);\r\n\r\n  const getNotes = () => {\r\n      getMyNotes(sessionStorage.getItem('email')).then((notes) => {\r\n          setNotes(notes);\r\n      });\r\n  }\r\n\r\n  const toggleTab = (tab) => {\r\n    if (activeTab !== tab)\r\n      setActiveTab(tab);\r\n  }\r\n\r\n  const handleUpdateMyNotes = () => {\r\n    getNotes();\r\n  }\r\n\r\n  const askForDelete = (note) => {\r\n    setShowDeleteModal(\r\n      <Modal isOpen=\"true\" className={props.className}>\r\n        <ModalHeader>Eliminar note</ModalHeader>\r\n        <ModalBody>\r\n          Se va a eliminar el note:<br/><small><strong>{note.message}</strong></small>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={() => deleteNoteSel(note)}>Eliminar</Button>{' '}\r\n          <Button color=\"secondary\" onClick={() => setShowDeleteModal(null)}>Cancelar</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  //Deleting selected note\r\n  const deleteNoteSel = (note) => {\r\n    deleteNote(note._id)\r\n      .then((res) => checkDELETENote(res));\r\n  }\r\n\r\n  //Check the response from server\r\n  const checkDELETENote = (res) => {\r\n    //if ok, remove modal and reset edit component\r\n    if (res === \"OK\"){\r\n      setShowDeleteModal(null);\r\n      setEdit(<Alert color=\"warning\">Seleccione editar un note de la lista</Alert>);\r\n      handleUpdateMyNotes();\r\n    }else{\r\n      //TODO Show a modal when error from server\r\n    }\r\n  }\r\n\r\n  const handleShowEdit = (note) => {\r\n    setEdit(<EditNote note= {note} updateMyNotes = {handleUpdateMyNotes} />);\r\n  }\r\n\r\n  useEffect(() =>{\r\n    getNotes();\r\n  },[]);\r\n\r\n  return(\r\n    <div>\r\n      {showDeleteModal}\r\n      <Row>\r\n        <Col xs=\"7\">\r\n          <CardTitle tag=\"center\"><Alert color=\"info\"><strong>Mis Notes </strong><Badge pill>{notes.length}</Badge></Alert></CardTitle>\r\n          <Table>\r\n            <tbody>\r\n              { notes.map((note, index) => {\r\n                return(<div>\r\n                  <div>\r\n                  <Row>\r\n                    <Col>\r\n                      <Card>\r\n                        <CardBody>\r\n                          <Row><Col><strong><img src={note.image} alt=\"Img\"/> {note.user}</strong></Col>\r\n                               <Col align=\"right\">\r\n                                  <Button outline onClick={() => handleShowEdit(note)}><FaEdit /></Button>\r\n                                  {' '}\r\n                                  <Button outline onClick={() => askForDelete(note)}><FaTrashAlt /></Button>\r\n                                </Col>\r\n                          </Row>\r\n                          <br></br>\r\n                          <Row>\r\n                            <Col>\r\n                              {note.message}\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col align=\"right\">\r\n                              <small>{getDateInStrFormat(new Date(note.publicationdate))}</small>\r\n                            </Col>\r\n                          </Row>\r\n                        </CardBody>\r\n                      </Card>\r\n                    </Col>\r\n                  </Row>\r\n                  <br/>\r\n              </div>\r\n                </div>)\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </Col>\r\n        <Col xs=\"5\">\r\n          <Nav tabs>\r\n            <NavItem>\r\n              <NavLink href=\"#\" className={classnames({ active: activeTab === '1' })} onClick={() => toggleTab('1')}>\r\n                Añadir\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"#\" className={classnames({ active: activeTab === '2' })} onClick={() => toggleTab('2')}>\r\n                Editar\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          <TabContent activeTab={activeTab}>\r\n            <TabPane tabId=\"1\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  <AddNote updateMyNotes = {handleUpdateMyNotes}/>\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n            <TabPane tabId=\"2\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  {edit}\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n          </TabContent>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './components/App';\nimport Home from './components/Home';\n\nReactDOM.render(<HashRouter>\n  <div>\n    <Route exact path=\"/\" component={App} />\n    <Route path=\"/home\" component={Home} />\n  </div>\n</HashRouter >, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","import React, { useState } from 'react';\r\nimport {Container, Row, Col } from 'reactstrap';\r\n\r\nimport HeaderDashboard from './HeaderDashboard';\r\nimport MyNoteList from './notes/MyNoteList';\r\nimport NoteList from './notes/NoteList';\r\n\r\nexport default function Home(props){\r\n\r\n  const [show, setShow] = useState(<NoteList />);\r\n \r\n  const handleLogout = () => {\r\n    sessionStorage.clear();\r\n    props.history.push(\"/\");\r\n  }\r\n\r\n  const handleOnShow = (option) => {\r\n    if (option === 1){\r\n      setShow(<NoteList />);\r\n    }else if (option === 2){\r\n      setShow(<MyNoteList />);\r\n    }\r\n  }\r\n\r\n  /*Esta variable de sesion tendrá un valor asignado cuando se ha hecho el login correctamente antes\r\n  sino no va a tener ningún valor por lo que cuando se quiera entrar directamente a /Home nos va a\r\n  redirigir a root*/\r\n  if (sessionStorage.getItem(\"name\") === null){\r\n    props.history.push(\"/\");\r\n  }\r\n  else{\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col><HeaderDashboard onLogout={handleLogout} onShow= {handleOnShow} /></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs=\"12\">\r\n              {show}\r\n            </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}"],"sourceRoot":""}