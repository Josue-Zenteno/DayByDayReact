{"version":3,"sources":["reportWebVitals.js","config.js","images/spicy_logo_blanco.png","utils/api.js","utils/apicalls.js","utils/utils.js","components/notes/NoteList.jsx","components/notes/VotedNoteList.jsx","components/App.jsx","components/HeaderDashboard.jsx","components/notes/AddNote.jsx","components/notes/EditNote.jsx","components/notes/MyNoteList.jsx","index.js","components/Home.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","config","baseURL_API","process","clientID","axios","create","baseURL","putExistingNoteVote","idnote","votes","API","put","result","data","monthNames","dayNames","getDateInStrFormat","date","getDay","getDate","getMonth","getFullYear","getHours","slice","getMinutes","getSeconds","NoteList","useState","notes","setNotes","getNotes","get","res","useEffect","CardTitle","tag","Alert","style","background","color","border","Table","map","note","index","Row","Col","Card","CardBody","src","image","alt","user","message","align","Date","publicationdate","Badge","pill","makeUpVote","_id","upVoteNote","makeDownVote","downVoteNote","Button","onClick","imgStyle","maxWidth","HeaderDashboard","props","Navbar","light","expand","NavbarBrand","className","sessionStorage","getItem","Collapse","navbar","Nav","NavItem","NavLink","href","onShow","clientId","buttonText","theme","onLogoutSuccess","onLogout","AddNote","setMessage","checkPOSTNewNote","updateMyNotes","body","Form","FormGroup","Label","for","Input","height","type","name","value","id","placeholder","onChange","e","target","preventDefault","email","post","postNewNote","EditNote","checkPUTNote","putExistingNote","MyNoteList","edit","setEdit","activeTab","setActiveTab","showDeleteModal","setShowDeleteModal","toggleTab","tab","handleUpdateMyNotes","deleteNoteSel","delete","checkDELETENote","length","tabs","classnames","active","TabContent","TabPane","tabId","sm","outline","handleShowEdit","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","askForDelete","ReactDOM","render","exact","path","component","loginMessage","setLoginMessage","Container","Media","object","SpicyLogo","onSuccess","googleUser","profile","getBasicProfile","setItem","getName","getEmail","getImageUrl","history","push","onFailure","response","show","setShow","votedList","setVotedList","clear","option","document","getElementById"],"mappings":"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","file":"static/js/main.a84ae59c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const config = {\r\n    baseURL_API: process.env.REACT_APP_APIURI,\r\n    clientID: process.env.REACT_APP_CLIENTID\r\n}\r\n\r\nexport default config;","export default __webpack_public_path__ + \"static/media/spicy_logo_blanco.36a11ad0.png\";","import axios from 'axios';\r\nimport config from '../config.js';\r\n\r\nexport default axios.create({\r\n  baseURL: config.baseURL_API\r\n  //baseURL: 'http://localhost:5000'\r\n});","import API from './api'\r\n\r\nexport {\r\n    getAllNotes,\r\n    getAllNotesVotes,\r\n    getMyNotes,\r\n    deleteNote,\r\n    postNewNote,\r\n    putExistingNote,\r\n    putExistingNoteVote\r\n};\r\n\r\nfunction getAllNotes() {\r\n    return API.get('/notes').then(res => res.data);\r\n}\r\n\r\nfunction getAllNotesVotes(){\r\n    return API.get('/notes/votes/').then(res => res.data);\r\n}\r\n\r\nfunction getMyNotes(email){\r\n    return API.get('/notes/all/'+email).then(res => res.data);\r\n}\r\n\r\nfunction deleteNote(idnote) {\r\n    return API.delete('/notes/'+idnote).then(result => result.data);\r\n}\r\n\r\nfunction postNewNote(email, user, image, message) {\r\n    return API.post('/notes', {\r\n      email,\r\n      user,\r\n      image,\r\n      message}).then(result => result.data);\r\n}\r\n\r\nfunction putExistingNote(idnote, message) {\r\n    return API.put('/notes/'+idnote, {\r\n      message}).then(result => result.data);\r\n}\r\n\r\nfunction putExistingNoteVote(idnote, votes) {\r\n    return API.put('/notes/'+idnote, {\r\n      votes}).then(result => result.data);\r\n}","export {\r\n    getDateInStrFormat\r\n};\r\n\r\n/* Formatting date */\r\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\nconst dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\",\"Fri\", \"Sat\"];\r\n\r\nfunction getDateInStrFormat(date){\r\n    var strformatted = dayNames[date.getDay()]+\", \"+\r\n                        date.getDate()+\" \"+\r\n                        monthNames[date.getMonth()]+\" \"+\r\n                        date.getFullYear()+\", \"+\r\n                        (\"0\" + date.getHours()).slice(-2)+\":\"+\r\n                        (\"0\" + date.getMinutes()).slice(-2)+\":\"+\r\n                        (\"0\" + date.getSeconds()).slice(-2);\r\n    return strformatted;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Card, CardTitle, CardBody, Table, Alert, Badge } from 'reactstrap';\r\n\r\nimport '../../styles.css';\r\nimport { getAllNotes } from \"../../utils/apicalls.js\";\r\nimport { getDateInStrFormat } from \"../../utils/utils.js\";\r\n\r\nexport default function NoteList(){\r\n\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  const getNotes = () => {\r\n    getAllNotes().then((notes) => { //este notes != variable de estado notes (esta guarda el resultado de usar getAllNotes)\r\n      setNotes(notes); //Ahora le seteamos a la variable de estado notes lo que hay en la variable notes \"local\"\r\n    });\r\n  }\r\n\r\n  //Este useEffect al no tener parametros es equivalente al ComponentWillMount de tal forma que se ejcutará al ser renderizado\r\n  useEffect(() =>{\r\n    getNotes();\r\n  },[]);\r\n\r\n  return (\r\n    <div>\r\n      <CardTitle tag=\"center\"><Alert style={{background: \"#592151\", color:\"white\", border:\"#592151\"}}><strong>New Notes  </strong></Alert></CardTitle>\r\n      <Table>\r\n        <tbody>\r\n          { notes.map((note, index) => {\r\n            return(\r\n              <div>\r\n                  <Row>\r\n                    <Col>\r\n                      <Card style={{background: \"#353044\", color:\"white\"}}>\r\n                        <CardBody>\r\n                          <Row>\r\n                            <Col>\r\n                              <strong><img src={note.image} alt=\"Img\"/> {note.user}</strong>\r\n                            </Col>\r\n                          </Row>\r\n                          <br></br>\r\n                          <Row>\r\n                            <Col>\r\n                              {note.message}\r\n                            </Col>\r\n                          </Row>\r\n                          <br></br>\r\n                          <Row>\r\n                            <Col align=\"left\">\r\n                              <small>{getDateInStrFormat(new Date(note.publicationdate))}</small>\r\n                            </Col>\r\n                            <Col align=\"right\">\r\n                              <Badge color=\"info\" pill>Votes: {note.votes}</Badge>\r\n                            </Col>\r\n                          </Row>\r\n                        </CardBody>\r\n                      </Card>\r\n                    </Col>\r\n                  </Row>\r\n                  <br/>\r\n              </div>)\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Card, CardTitle, CardBody, Table, Alert, Button, Badge } from 'reactstrap';\r\n\r\nimport { BiArrowFromBottom, BiArrowFromTop } from 'react-icons/bi';\r\nimport { FaFire } from 'react-icons/fa';\r\n\r\nimport '../../styles.css';\r\nimport { getAllNotesVotes, putExistingNoteVote } from \"../../utils/apicalls.js\";\r\nimport { getDateInStrFormat } from \"../../utils/utils.js\";\r\n\r\nexport default function NoteList(){\r\n\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  const getNotes = () => {\r\n    getAllNotesVotes().then((notes) => { //este notes != variable de estado notes (esta guarda el resultado de usar getAllNotes)\r\n      setNotes(notes); //Ahora le seteamos a la variable de estado notes lo que hay en la variable notes \"local\"\r\n    });\r\n  }\r\n\r\n  const upVoteNote = (note) =>{\r\n    putExistingNoteVote(note._id, note.votes+1);\r\n  }\r\n\r\n  const downVoteNote = (note) =>{\r\n    putExistingNoteVote(note._id, note.votes-1);\r\n  }\r\n\r\n  const makeUpVote = (note) => {\r\n    upVoteNote(note);\r\n  }\r\n\r\n  const makeDownVote = (note) => {\r\n    downVoteNote(note);\r\n  }\r\n\r\n  useEffect(() =>{\r\n    getNotes();\r\n  },[notes]);\r\n\r\n  //Este useEffect al no tener parametros es equivalente al ComponentWillMount de tal forma que se ejcutará al ser renderizado\r\n  useEffect(() =>{\r\n    getNotes();\r\n  },[]);\r\n\r\n  return (\r\n    <div>\r\n      <CardTitle tag=\"center\"><Alert style={{background: \"#592151\", color:\"white\", border:\"#592151\"}}><strong>Trending Notes  </strong><FaFire></FaFire></Alert></CardTitle>\r\n      <Table>\r\n        <tbody>\r\n          { notes.map((note, index) => {\r\n            return(\r\n              <div>\r\n                  <Row>\r\n                    <Col>\r\n                      <Card style={{background: \"#353044\", color:\"white\"}}>\r\n                        <CardBody>\r\n                          <Row>\r\n                            <Col>\r\n                              <strong><img src={note.image} alt=\"Img\"/> {note.user}</strong>\r\n                            </Col>\r\n                            <Col align=\"right\">\r\n                              <Button color=\"secondary\" onClick={() => makeDownVote(note)}><BiArrowFromTop/></Button>\r\n                              {' '}\r\n                              <Button color=\"info\" onClick={() => makeUpVote(note)}><BiArrowFromBottom /></Button>\r\n                            </Col>\r\n                          </Row>\r\n                          <br></br>\r\n                          <Row>\r\n                            <Col>\r\n                              {note.message}\r\n                            </Col>\r\n                          </Row>\r\n                          <br></br>\r\n                          <Row>\r\n                            <Col align=\"left\">\r\n                              <small>{getDateInStrFormat(new Date(note.publicationdate))}</small>\r\n                            </Col>\r\n                            <Col align=\"right\">\r\n                              <Badge color=\"info\" pill>Votes: {note.votes}</Badge>\r\n                            </Col>\r\n                          </Row>\r\n                        </CardBody>\r\n                      </Card>\r\n                    </Col>\r\n                  </Row>\r\n                  <br/>\r\n              </div>)\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { Navbar, NavbarBrand, Nav, NavItem, Media, Row, Col, Container, Alert } from 'reactstrap';\r\nimport { GoogleLogin } from 'react-google-login';\r\n\r\nimport config from '../config.js';\r\nimport SpicyLogo from '../images/spicy_logo_blanco.png';\r\n\r\nimport NoteList from './notes/NoteList';\r\nimport VotedNoteList from './notes/VotedNoteList';\r\n\r\nimport '../styles.css';\r\n//Un estilo, para no tener que tener un css\r\nvar imgStyle = {\r\n  maxWidth: \"85px\",\r\n};\r\n\r\nexport default function App(props){\r\n  //[variable, funcionCambiaVariable] = estadoPorDefecto\r\n  const [loginMessage, setLoginMessage] = useState(null); \r\n\r\n  const responseGoogleSuccess = (googleUser) => {\r\n    //Obtener usuario de google\r\n    var profile = googleUser.getBasicProfile(); \r\n\r\n    //Variables de sesion (sesion terminara cuando se haga logOut)\r\n    sessionStorage.setItem('name', profile.getName()); \r\n    sessionStorage.setItem('email', profile.getEmail());\r\n    sessionStorage.setItem('image', profile.getImageUrl());\r\n    \r\n    //Una historia es un array de direcciones entonces redireccionamos a /home\r\n    props.history.push(\"/home\");\r\n  }\r\n\r\n  const responseGoogleFailure = (response) => {\r\n    //Un estado puede ser lo que nos de la gana, en este caso un componente Alert\r\n    setLoginMessage(<Alert color=\"danger\">Inicio de sesión incorrecto. Inténtelo de nuevo</Alert>);\r\n  }\r\n\r\n  return(\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <Navbar style={{background:\"#762C6B\"}} light expand=\"md\">\r\n          <Media style={imgStyle} object src={SpicyLogo} alt=\"Bird\"/><NavbarBrand><h1 className=\"text-white\">Day By Day</h1></NavbarBrand>\r\n            <Nav className=\"ml-auto\" style={{background:\"white\"}} navbar>\r\n              <NavItem>\r\n                {loginMessage}\r\n                <GoogleLogin\r\n                  clientId={config.clientID}\r\n                  buttonText=\"Sign in with Google\"\r\n                  theme='light'\r\n                  onSuccess={responseGoogleSuccess}\r\n                  onFailure={responseGoogleFailure}\r\n                />\r\n              </NavItem>\r\n            </Nav>\r\n          </Navbar>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <VotedNoteList/>\r\n        </Col>\r\n        <Col>\r\n          <NoteList/>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\nimport { Collapse, Navbar, NavbarBrand, Nav, NavItem, NavLink, Badge } from 'reactstrap';\r\nimport { GoogleLogout } from 'react-google-login';\r\n//añadir el spicy logo\r\n\r\nimport config from '../config.js';\r\n\r\nexport default function HeaderDashboard(props){\r\n\r\n  return (\r\n    <Navbar style={{background:\"#762C6B\"}} light expand=\"md\">\r\n      <NavbarBrand><span className=\"text-white\"><strong>Day By Day:    </strong> {sessionStorage.getItem('name')}</span></NavbarBrand>\r\n      <Collapse navbar>\r\n        <Nav className=\"ml-auto\" navbar>\r\n          <NavItem style={{background:\"#762C6B\"}}>\r\n            <NavLink href=\"#\" onClick={() => props.onShow(1)}><h3><Badge style={{background:\"#F69C38\"}} className=\"text-white\" pill>Dashboard</Badge></h3></NavLink>\r\n          </NavItem>\r\n          <NavItem style={{background:\"#762C6B\"}}>\r\n            <NavLink href=\"#\" onClick={() => props.onShow(2)}><h3><Badge style={{background:\"#935BF7\"}} className=\"text-white\" pill>My Notes</Badge></h3></NavLink>\r\n          </NavItem>\r\n          <NavItem style={{background:\"#762C6B\"}}>\r\n            <GoogleLogout\r\n              clientId={config.clientID}\r\n              buttonText=\"Sign Out\"\r\n              theme='light'\r\n              onLogoutSuccess={props.onLogout}\r\n            />\r\n          </NavItem>\r\n        </Nav>\r\n      </Collapse>\r\n  </Navbar>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { Card, CardTitle, Label, Button, Form, FormGroup, Input } from 'reactstrap';\r\n\r\nimport { postNewNote } from \"../../utils/apicalls.js\";\r\n\r\nexport default function AddNote(props){\r\n\r\n  const [message, setMessage] = useState('');\r\n\r\n  const addNote = (e) => {\r\n    e.preventDefault();\r\n    //Save note in database with post api call\r\n    postNewNote(sessionStorage.getItem('email'),sessionStorage.getItem('name'), sessionStorage.getItem('image'), message)\r\n      .then((res) => checkPOSTNewNote(res));\r\n  }\r\n\r\n  //Check the response from the server\r\n  const checkPOSTNewNote = (res) => {\r\n    if (res === \"OK\"){\r\n      //TODO Show Modal when a new note is added\r\n      props.updateMyNotes();\r\n    }else{\r\n      //TODO Show Modal when an error adding a new note occurs\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card body style={{background: \"#211E2B\", color:\"white\", border:\"#505B7E\"}}>\r\n        <CardTitle tag=\"h5\">Add a new Note</CardTitle>\r\n        <Form>\r\n          <FormGroup>\r\n            <Label for=\"aMensaje\">Message</Label>\r\n            <Input style={{height: '200px'}} type=\"textarea\" name=\"message\" value={message} id=\"aMensaje\" placeholder=\"Introduce a message\" onChange={(e) => setMessage(e.target.value)}/>\r\n          </FormGroup>\r\n          <Button color=\"info\" onClick={addNote}>Add</Button>\r\n        </Form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Card, CardTitle, Label, Button, Form, FormGroup, Input } from 'reactstrap';\r\n\r\nimport { putExistingNote } from \"../../utils/apicalls.js\";\r\n\r\nexport default function EditNote(props){\r\n\r\n  const [message, setMessage] = useState(props.note.message);\r\n\r\n  const editNote = (e) => {\r\n    e.preventDefault();\r\n    //Update note in database with put api call\r\n    putExistingNote(props.note._id, message)\r\n      .then((res) => checkPUTNote(res));\r\n  }\r\n\r\n  /*AÑADIR METODO PARA LLAMAR A LA APICALLS CON METODO DE UPVOTES*/\r\n\r\n  //Check the response from the server\r\n  const checkPUTNote = (res) => {\r\n    if (res === \"OK\"){\r\n      //TODO Show Modal when a the note is updated\r\n      props.updateMyNotes();\r\n    }else{\r\n      //TODO Show Modal when an error updating the note occurs\r\n    }\r\n  }\r\n\r\n  useEffect(() =>{\r\n    setMessage(props.note.message);\r\n  },[props.note]);\r\n\r\n  return (\r\n    <div>\r\n      <Card body style={{background: \"#211E2B\", color:\"white\", border:\"#505B7E\"}}>\r\n        <CardTitle tag=\"h5\">Edit Note</CardTitle>\r\n        <Form>\r\n          <FormGroup>\r\n            <Label for=\"aDescripcion\">Message</Label>\r\n            <Input style={{height: '200px'}} type=\"textarea\" name=\"message\" id=\"aDescripcion\" placeholder=\"Introduce a message\" value={message} onChange={(e) => setMessage(e.target.value)}/>\r\n          </FormGroup>\r\n            <Button color=\"info\" onClick={editNote}>Update</Button>\r\n        </Form>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport classnames from 'classnames';\r\nimport '../../styles.css';\r\n\r\n\r\nimport { Row, Col, Card, CardTitle, Badge, CardBody,\r\nTable, Alert, Button, Nav, NavItem, NavLink, TabContent,\r\nTabPane, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nimport { FaTrashAlt, FaUserCircle, FaPenAlt } from 'react-icons/fa';\r\n\r\nimport { getMyNotes, deleteNote } from \"../../utils/apicalls.js\";\r\nimport { getDateInStrFormat } from \"../../utils/utils.js\";\r\n\r\nimport AddNote from './AddNote';\r\nimport EditNote from './EditNote';\r\n\r\nexport default function MyNoteList(props){\r\n\r\n  const [notes, setNotes] = useState([]);\r\n  const [edit, setEdit] = useState(<Alert color=\"danger\">Choose a Note from the list</Alert>);\r\n  const [activeTab, setActiveTab] = useState('1');\r\n  const [showDeleteModal, setShowDeleteModal] = useState(null);\r\n\r\n  const getNotes = () => {\r\n      getMyNotes(sessionStorage.getItem('email')).then((notes) => {\r\n          setNotes(notes);\r\n      });\r\n  }\r\n\r\n  const toggleTab = (tab) => {\r\n    if (activeTab !== tab)\r\n      setActiveTab(tab);\r\n  }\r\n\r\n  const handleUpdateMyNotes = () => {\r\n    getNotes();\r\n  }\r\n\r\n  const askForDelete = (note) => {\r\n    setShowDeleteModal(\r\n      <Modal isOpen=\"true\" className={props.className}>\r\n        <ModalHeader>Eliminar note</ModalHeader>\r\n        <ModalBody>\r\n          Se va a eliminar el note:<br/><small><strong>{note.message}</strong></small>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={() => deleteNoteSel(note)}>Eliminar</Button>{' '}\r\n          <Button color=\"secondary\" onClick={() => setShowDeleteModal(null)}>Cancelar</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  //Deleting selected note\r\n  const deleteNoteSel = (note) => {\r\n    deleteNote(note._id)\r\n      .then((res) => checkDELETENote(res));\r\n  }\r\n\r\n  //Check the response from server\r\n  const checkDELETENote = (res) => {\r\n    //if ok, remove modal and reset edit component\r\n    if (res === \"OK\"){\r\n      setShowDeleteModal(null);\r\n      setEdit(<Alert>Choose a Note from the list</Alert>);\r\n      handleUpdateMyNotes();\r\n    }else{\r\n      //TODO Show a modal when error from server\r\n    }\r\n  }\r\n\r\n  const handleShowEdit = (note) => {\r\n    setEdit(<EditNote note= {note} updateMyNotes = {handleUpdateMyNotes} />);\r\n  }\r\n\r\n  useEffect(() =>{\r\n    getNotes();\r\n  },[]);\r\n\r\n  return(\r\n    <div>\r\n      {showDeleteModal}\r\n      <Row>\r\n        <Col>\r\n          <CardTitle tag=\"center\"><Alert style={{background: \"#592151\", color:\"white\", border:\"#592151\"}}><strong>Profile   </strong><FaUserCircle/></Alert></CardTitle>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n          <Col>\r\n            <Card style={{background:\"#2A478B\", color: \"white\"}}>\r\n              <CardBody>\r\n                <Row>\r\n                  <Col>\r\n                    <strong><img src={sessionStorage.getItem('image')} alt=\"Img\"/> {sessionStorage.getItem('name')}</strong>\r\n                  </Col>\r\n                </Row>\r\n                </CardBody>\r\n            </Card>\r\n          </Col>\r\n      </Row>\r\n      <br></br>\r\n      <Row>\r\n        <Col>\r\n          <CardTitle tag=\"center\"><Alert style={{background: \"#592151\", color:\"white\", border:\"#592151\"}}><strong>My Notes </strong><Badge pill>{notes.length}</Badge></Alert></CardTitle>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Nav tabs>\r\n            <NavItem style={{background: \"#211E2B\", color:\"white\", border:\"#592151\"}}>\r\n              <NavLink href=\"#\" className={classnames({ active: activeTab === '1' })} onClick={() => toggleTab('1')}>\r\n                Add\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem style={{background: \"#211E2B\", color:\"white\", border:\"#592151\"}}>\r\n              <NavLink href=\"#\" className={classnames({ active: activeTab === '2' })} onClick={() => toggleTab('2')}>\r\n                Edit\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          <TabContent activeTab={activeTab}>\r\n            <TabPane tabId=\"1\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  <AddNote updateMyNotes = {handleUpdateMyNotes}/>\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n            <TabPane tabId=\"2\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  {edit}\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n          </TabContent>\r\n        </Col>\r\n      </Row>\r\n      <br></br>\r\n      <Row>\r\n        <Col>\r\n          <Table>\r\n            <tbody>\r\n              { notes.map((note, index) => {\r\n                return(<div>\r\n                  <div>\r\n                  <Row>\r\n                    <Col>\r\n                      <Card  style={{background: \"#353044\", color:\"white\"}}>\r\n                        <CardBody>\r\n                          <Row><Col><strong><img src={note.image} alt=\"Img\"/> {note.user}</strong></Col>\r\n                               <Col align=\"right\">\r\n                                  <Button style={{background:\"#F69C38\", color: \"white\"}} outline onClick={() => handleShowEdit(note)}><FaPenAlt/></Button>\r\n                                  {' '}\r\n                                  <Button style={{background:\"#F45873\", color: \"white\"}} outline onClick={() => askForDelete(note)}><FaTrashAlt /></Button>\r\n                                </Col>\r\n                          </Row>\r\n                          <br></br>\r\n                          <Row>\r\n                            <Col>\r\n                              {note.message}\r\n                            </Col>\r\n                          </Row>\r\n                          <br></br>\r\n                          <Row>\r\n                            <Col align=\"left\">\r\n                              <small>{getDateInStrFormat(new Date(note.publicationdate))}</small>\r\n                            </Col>\r\n                            <Col align=\"right\">\r\n                              <Badge color=\"info\" pill>Votes: {note.votes}</Badge>\r\n                            </Col>\r\n                          </Row>\r\n                        </CardBody>\r\n                      </Card>\r\n                    </Col>\r\n                  </Row>\r\n                  <br/>\r\n              </div>\r\n                </div>)\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </Col>\r\n        </Row>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport App from './components/App';\r\nimport Home from './components/Home';\r\n\r\nReactDOM.render(<HashRouter>\r\n  <div>\r\n    <Route exact path=\"/\" component={App} />\r\n    <Route path=\"/home\" component={Home} />\r\n  </div>\r\n</HashRouter >, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\nreportWebVitals();","import React, { useState } from 'react';\r\nimport {Container, Row, Col } from 'reactstrap';\r\n\r\nimport HeaderDashboard from './HeaderDashboard';\r\nimport MyNoteList from './notes/MyNoteList';\r\nimport NoteList from './notes/NoteList';\r\nimport VotedNoteList from './notes/VotedNoteList';\r\n\r\nexport default function Home(props){\r\n\r\n  const [show, setShow] = useState(<NoteList />);\r\n  const [votedList, setVotedList] = useState(<VotedNoteList/>);\r\n \r\n  const handleLogout = () => {\r\n    sessionStorage.clear();\r\n    props.history.push(\"/\");\r\n  }\r\n\r\n  const handleOnShow = (option) => {\r\n    if (option === 1){\r\n      setShow(<NoteList />);\r\n      setVotedList(<VotedNoteList/>);\r\n    }else if (option === 2){\r\n      setShow(<MyNoteList />);\r\n      setVotedList(<VotedNoteList/>);\r\n    }\r\n  }\r\n\r\n  /*Esta variable de sesion tendrá un valor asignado cuando se ha hecho el login correctamente antes\r\n  sino no va a tener ningún valor por lo que cuando se quiera entrar directamente a /Home nos va a\r\n  redirigir a root*/\r\n  if (sessionStorage.getItem(\"name\") === null){\r\n    props.history.push(\"/\");\r\n  }\r\n\r\n  else{\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col><HeaderDashboard onLogout={handleLogout} onShow= {handleOnShow} /></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            {votedList}\r\n          </Col>\r\n          <Col>\r\n            {show}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}"],"sourceRoot":""}